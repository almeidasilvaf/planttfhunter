[{"path":"/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with tfhunter","title":"Getting help with tfhunter","text":"Thanks using tfhunter! filing issue, places explore pieces put together make process smooth possible.","code":""},{"path":"/SUPPORT.html","id":"make-a-reprex","dir":"","previous_headings":"","what":"Make a reprex","title":"Getting help with tfhunter","text":"Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site.","code":""},{"path":"/SUPPORT.html","id":"where-to-ask","dir":"","previous_headings":"","what":"Where to ask?","title":"Getting help with tfhunter","text":"Armed reprex, next step figure ask. See also Bioconductor help website. ’s question: start community.rstudio.com, /StackOverflow. Bioconductor-related question, please ask Bioconductor Support Website using appropriate package tag (website send automatic email package authors). people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed.","code":""},{"path":"/SUPPORT.html","id":"what-happens-next","dir":"","previous_headings":"","what":"What happens next?","title":"Getting help with tfhunter","text":"efficient possible, development tidyverse packages tends bursty, shouldn’t worry don’t get immediate response. Typically don’t look repo sufficient quantity issues accumulates, ’s burst intense activity focus efforts. makes development efficient avoids expensive context switching problems, cost taking longer get back . process makes good reprex particularly important might multiple months initial report start working . can’t reproduce bug, can’t fix !","code":""},{"path":"/articles/vignette_tfhunter.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Genome-wide identification and classification of transcription factors in plant genomes","text":"Transcription factors (TFs) proteins bind cis-regulatory elements promoter regions genes regulate expression. Identifying genome useful variety reasons, exploring evolutionary history across clades inferring gene regulatory networks. tfhunter allows users identify plant TFs whole-genome protein sequences classify families subfamilies (applicable) using classification scheme implemented PlantTFDB.","code":""},{"path":"/articles/vignette_tfhunter.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"Genome-wide identification and classification of transcription factors in plant genomes","text":"can install tfhunter following code: Loading package installation:","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {       install.packages(\"BiocManager\")   }  BiocManager::install(\"tfhunter\") library(tfhunter)"},{"path":"/articles/vignette_tfhunter.html","id":"data-description","dir":"Articles","previous_headings":"","what":"Data description","title":"Genome-wide identification and classification of transcription factors in plant genomes","text":"vignette, use protein sequences TFs algae species Galdieria sulphuraria example. proteome file downloaded PLAZA Diatoms database (Osuna-Cruz et al. 2020), filtered keep TFs demonstration purposes. object gsu stores protein sequences AAStringSet object.","code":"data(gsu) gsu #> AAStringSet object of length 290: #>       width seq                                             names                #>   [1]   383 MSVLLQTSRGDIVVDLFTDLAP...EKALFQEHRRSSYSKTSKRYK* gsu00340.1 #>   [2]   301 MESMSQTKRWSCVIYQVDSILP...PNISLQQLLGDEDEISWSGLP* gsu04730.1 #>   [3]   232 MEKGPCSHKWKQLHVGDYQHDN...PNISLQQLLGDEDEISWSGLP* gsu05000.1 #>   [4]   340 MDVPSYRFECTPLVEVKKEARD...EVTQSSTRNCNDKEWNPNANE* gsu06140.1 #>   [5]   120 MAPKERSKPKSRSSKAGLQFPV...SGGVLPNVHPNLLPKKKAKEE* gsu06160.1 #>   ...   ... ... #> [286]   394 MSKLEAASDSGSLKTSSCSFQE...NETNSHDKPGEDRMNIQENTS* gsu98790.1 #> [287]   365 MITEVDNPMSFVHSEHFMNYSS...RRHSRLPVFQTLEEKSDIHSK* gsu99250.1 #> [288]   365 MITEVDNPMSFVHSEHFMNYSS...RRHSRLPVFQTLEEKSDIHSK* gsu99270.1 #> [289]   284 MTSFYIKKGITFSSIVYNHNYK...LFQRIIEINKNYNPLIQLQRI* AIG92462.1 #> [290]   219 MKYKLLVIDDELSIRQSLKKYL...TFTRSRTELVRYAIKNNLIIE* AIG92471.1"},{"path":"/articles/vignette_tfhunter.html","id":"algorithm-description","dir":"Articles","previous_headings":"","what":"Algorithm description","title":"Genome-wide identification and classification of transcription factors in plant genomes","text":"TF identification classification based presence signature protein domains, identified using profile hidden Markov models (HMMs). family classification scheme one used PlantTFDB (Jin et al. 2016), summarized : 1","code":""},{"path":"/articles/vignette_tfhunter.html","id":"identifying-and-classifying-tfs","dir":"Articles","previous_headings":"","what":"Identifying and classifying TFs","title":"Genome-wide identification and classification of transcription factors in plant genomes","text":"identify TFs protein sequence data, use function annotate_pfam(). function takes input AAStringSet object 2 returns data frame protein domains associated sequence. HMMER program (Finn, Clements, Eddy 2011) used scan protein sequences presence DNA-binding protein domains, well auxiliary forbidden domains. Pre-built HMM profiles can found extdata/ directory package. Now TF-related domains, can classify TFs families function classify_tfs().","code":"data(gsu_annotation)  # Annotate TF-related domains using a local installation of HMMER if(hmmer_is_installed()) {   gsu_annotation <- annotate_pfam(gsu) }   # Take a look at the first few lines of the output head(gsu_annotation) #>          Gene  Domain #> 1 gsu144370.1 PF00010 #> 2 gsu140730.1 PF00010 #> 3 gsu127100.1 PF00046 #> 4 gsu109490.1 PF00046 #> 5  AIG92462.1 PF00072 #> 6  AIG92471.1 PF00072 data(gsu_families)  # Classify TFs into families if(hmmer_is_installed()) {   gsu_families <- classify_tfs(gsu_annotation) }   # Take a look at the output head(gsu_families) #>          Gene      Family #> 1  gsu04730.1    Nin-like #> 2  gsu05000.1    Nin-like #> 3  gsu06140.1     G2-like #> 4  gsu06140.1 MYB-related #> 5  gsu09770.1         C3H #> 6 gsu100410.1    Nin-like  # Count number of TFs per family table(gsu_families$Family) #>  #>        bHLH        bZIP        C2H2         C3H         CPP      E2F/DP  #>           2           8           4          13           3           8  #>     G2-like        GATA    HB-other         HSF         LSD      M-type  #>           2           8           2           6           3           1  #>         MYB MYB-related       NF-X1       NF-YA       NF-YB       NF-YC  #>          16          28           1           1           4           5  #>    Nin-like  #>          10"},{"path":"/articles/vignette_tfhunter.html","id":"counting-tfs-per-family-in-multiple-species-at-once","dir":"Articles","previous_headings":"","what":"Counting TFs per family in multiple species at once","title":"Genome-wide identification and classification of transcription factors in plant genomes","text":"want get TF counts per family multiple species, can use function get_tf_counts(). function takes list AAStringSet objects containing proteomes input, returns SummarizedExperiment object containing TF counts per family species, well species metadata (optional). familiar SummarizedExperiment class, consider checking vignettes SummarizedExperiment Bioconductor package. demonstrate get_tf_counts() works, simulate list 5 AAStringSet objects sampling 100 random genes example data set gsu 5 times. also create toy species metadata data frame “species” (simulated). Great, now list 5 AAStringSet objects. Let’s also create simulated species metadata data frame “species” (simulated). can add many columns want species metadata data frame, make sure species names row names, names(proteomes) match rownames(species), otherwise get_tf_counts() return error. Now list AAStringSet objects species metadata, can execute get_tf_counts() : Cool, huh? real-world analyses, TF counts per family multiple species, can try find associations TF counts eco-evolutionary aspects species (e.g., higher frequencies stress-related TF family species inhabits stressful environment).","code":"set.seed(123) # for reproducibility  # Simulate 5 different species by sampling 100 random genes from `gsu` proteomes <- list(     Gsu1 = gsu[sample(names(gsu), 50, replace = FALSE)],     Gsu2 = gsu[sample(names(gsu), 50, replace = FALSE)],     Gsu3 = gsu[sample(names(gsu), 50, replace = FALSE)],     Gsu4 = gsu[sample(names(gsu), 50, replace = FALSE)] ) proteomes #> $Gsu1 #> AAStringSet object of length 50: #>      width seq                                              names                #>  [1]   405 MSQDTYTFEKLGVCKILCEECKN...SSSYNCPTDERMESEEEKLET* gsu49120.1 #>  [2]   292 MGRSTTVFVGNIAYNTSEEQLQE...TLGAQMGQPGLGSSAFSSNNN* gsu102250.1 #>  [3]   530 MTFTRIENNLKKYFGYENFRPLQ...KMSKTQNINQKTLLRWFSETM* gsu56420.1 #>  [4]   672 MNRSLFTPTLRWSQWFAKTCTTL...EKRKLSVVHNKTQQIVSFNRH* gsu22760.1 #>  [5]   606 MSQERLTPFERHLKKVEEKNQRE...EEDLDGVPLEEDEEAIEIEIK* gsu68790.1 #>  ...   ... ... #> [46]   465 MNMFSYSTIETPKYVRSNSSDDR...STQMSHLLSVALQDWVEWNQE* gsu47220.1 #> [47]  2225 MSFPPKFRNYLLAQKGQPVSVEQ...MWRWVDNKSQFLSSYQVAWNE* gsu96990.1 #> [48]   292 MRGKSKSVVFPASRIKRIMRINE...LDKVESPSRVFISIEELVHSV* gsu124540.1 #> [49]   477 MDSSKKSTNPKLSESGTKDNRGN...PSDTTAPQVAVNVHAGNGSSK* gsu67550.1 #> [50]   740 MERLQPPYRYLIILDLEATAVDL...CTQDKSVSLGSVSLEGKGDSV* gsu102410.1 #>  #> $Gsu2 #> AAStringSet object of length 50: #>      width seq                                              names                #>  [1]   764 MSQSVPVKNDTEDSCGVQKLSNA...NSDDTSRIRRRTLNVHDLLSE* gsu21860.1 #>  [2]   406 MQPHVSDHRYPTTVEQREYHSGS...QTTDVTGGAVFLRKETEHKDI* gsu140730.1 #>  [3]   714 MEDERNSRLLIQGLPKYIAEKRL...LVFDYLVNWMALIVALVLSSF* gsu84990.1 #>  [4]   236 MDTSEQGSEQGEESISNNSQQLC...YTNTASHRFRKLLKASVGDTS* gsu72770.1 #>  [5]   524 MKKNAKEIGAQYSALVFIHVALF...PVSTVPYFVMDNNSGGSYSFV* gsu136350.1 #>  ...   ... ... #> [46]   284 MTSFYIKKGITFSSIVYNHNYKF...LFQRIIEINKNYNPLIQLQRI* AIG92462.1 #> [47]   546 MAPRLNKTTQTKLKKQSSFREQP...NACGLFWAKHKQLRPKEKWVR* gsu134260.1 #> [48]   310 MSGGSGIYQPSGMSLYVGNLDPR...EIAGCVVQCEWGREGLKSRYF* gsu10640.1 #> [49]   445 MEPISKDDVYGGFSTVENCDSSM...NCKCVDCKNQSSLSLLKNTAM* gsu21090.1 #> [50]   318 MFICGHMIQNLVSVCAHSRIFCI...DCSYIFATDASDYPPPWQYFP* gsu64800.1 #>  #> $Gsu3 #> AAStringSet object of length 50: #>      width seq                                              names                #>  [1]   196 MAYLYEDRPVTLYRDRRFQGTQE...RDETDEVFQTEKNPRFREEED* gsu18660.1 #>  [2]   171 MEDRMQVVVSETSKGEERGRGRG...SWAFSRGPLGTRLSTRRRSEK* gsu34810.1 #>  [3]   461 MTERIDKSRRKKYVLTKKREYWT...HKESFSKRTYPDSVQAVIVGQ* gsu38570.1 #>  [4]  1207 MELVSGPLLDQFPFVAGHSRQTL...KYGREHHWQYSLEHPFVSPIL* gsu143710.1 #>  [5]   928 MFILVVEVKVEEYFSFQLDDFQQ...LRRVLDILRQIPRLPAKQWLS* gsu79190.1 #>  ...   ... ... #> [46]   150 MAAVEDNRVFVGGLPWSVGEDDL...GHGHGGRGGRSGGFRRREDFE* gsu58080.1 #> [47]   122 MAPKERSKPKSRSSKAGLQFPVG...GVLPNVHPNLLPKKKAKEDMQ* gsu59350.1 #> [48]   680 MWSTVDYSLNCDEEFRELSNAAA...QQSTNVVYPSNTNNSETCENS* gsu44800.1 #> [49]   148 MVANGEPGVIYIGHLPHGFYENE...ERRNKELEVKLKKLGVSFSLS* gsu97960.1 #> [50]   226 MAYRKLETRVPSYLDEVLGKVSS...SAPEGVWRCPDCRSGGANRAR* gsu111770.1 #>  #> $Gsu4 #> AAStringSet object of length 50: #>      width seq                                              names                #>  [1]   740 MERLQPPYRYLIILDLEATAVDL...CTQDKSVSLGSVSLEGKGDSV* gsu102410.1 #>  [2]   701 MFKSSLLTFPALKTVVGAQDQYT...NLTKSFDLKKSQLSKRKKKWK* gsu110850.1 #>  [3]   484 MSEVSWEAGRSPVQPGKDHKSSS...DRSSTENRNSGRRRSVEGRAR* gsu114840.1 #>  [4]   483 MEEERKQKKGTGTSVSKTRAVQE...AKSADDESSRPVRQYDVENVA* gsu100590.1 #>  [5]   122 MAPKERSKPKSRSSKAGLQFPVG...GVLPNVHPNLLPKKKAKEDMQ* gsu59350.1 #>  ...   ... ... #> [46]   798 MVLYQSYSSDTNSDVKPSEVSNS...EDENNKILCLCGAPTCRKFLN* gsu40400.1 #> [47]   383 MSVLLQTSRGDIVVDLFTDLAPL...EKALFQEHRRSSYSKTSKRYK* gsu139150.1 #> [48]   518 MRSGTTLSSLHNSHTEDATSLRA...EIGDIASLLEGEEVNYERLER* gsu32730.1 #> [49]   287 MKASQVLASQLCELCQSANSSIY...RKQLAERRCRFKGRFIKNTAS* gsu55840.1 #> [50]  1886 MDDTEYVPVKKRRQRILQQAKEL...TEVTRKQLIYYLSDVLANNKE* gsu43660.1 # Create simulated species metadata species_metadata <- data.frame(     row.names = names(proteomes),     Division = \"Rhodophyta\",     Origin = c(\"US\", \"Belgium\", \"China\", \"Brazil\") )  species_metadata #>        Division  Origin #> Gsu1 Rhodophyta      US #> Gsu2 Rhodophyta Belgium #> Gsu3 Rhodophyta   China #> Gsu4 Rhodophyta  Brazil data(tf_counts)  # Get TF counts per family in each species as a SummarizedExperiment object if(hmmer_is_installed()) {     tf_counts <- get_tf_counts(proteomes, species_metadata) }  # Take a look at the SummarizedExperiment object tf_counts #> class: SummarizedExperiment  #> dim: 19 4  #> metadata(0): #> assays(1): counts #> rownames(19): C2H2 C3H ... NF-YA NF-YB #> rowData names(0): #> colnames(4): Gsu1 Gsu2 Gsu3 Gsu4 #> colData names(2): Division Origin  # Look at the matrix of counts: assay() function from SummarizedExperiment SummarizedExperiment::assay(tf_counts) #>             Gsu1 Gsu2 Gsu3 Gsu4 #> C2H2           3    1    1    2 #> C3H            3    2    0    3 #> CPP            1    1    1    0 #> E2F/DP         1    2    2    2 #> GATA           1    2    1    0 #> HSF            2    0    0    3 #> MYB            3    3    0    2 #> MYB-related    4    5    3    9 #> NF-X1          1    0    0    0 #> NF-YC          3    0    0    1 #> Nin-like       2    0    1    1 #> bHLH           0    1    1    0 #> bZIP           0    2    4    0 #> G2-like        0    1    0    0 #> HB-other       0    1    0    0 #> LSD            0    1    0    0 #> M-type         0    1    1    0 #> NF-YA          0    1    0    0 #> NF-YB          0    2    0    1  # Look at the species metadata: colData() function from SummarizedExperiment SummarizedExperiment::colData(tf_counts) #> DataFrame with 4 rows and 2 columns #>         Division      Origin #>      <character> <character> #> Gsu1  Rhodophyta          US #> Gsu2  Rhodophyta     Belgium #> Gsu3  Rhodophyta       China #> Gsu4  Rhodophyta      Brazil"},{"path":"/articles/vignette_tfhunter.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Genome-wide identification and classification of transcription factors in plant genomes","text":"document created following conditions:","code":"sessioninfo::session_info() #> ─ Session info ─────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.2.1 (2022-06-23) #>  os       Ubuntu 20.04.4 LTS #>  system   x86_64, linux-gnu #>  ui       X11 #>  language en #>  collate  en_US.UTF-8 #>  ctype    en_US.UTF-8 #>  tz       UTC #>  date     2022-10-06 #>  pandoc   2.18 @ /usr/local/bin/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────── #>  package              * version  date (UTC) lib source #>  Biobase                2.56.0   2022-04-26 [1] Bioconductor #>  BiocGenerics           0.42.0   2022-04-26 [1] Bioconductor #>  BiocManager            1.30.18  2022-05-18 [2] CRAN (R 4.2.1) #>  BiocStyle            * 2.24.0   2022-04-26 [1] Bioconductor #>  Biostrings             2.64.1   2022-08-18 [1] Bioconductor #>  bitops                 1.0-7    2021-04-24 [1] RSPM (R 4.1.0) #>  bookdown               0.29     2022-09-12 [1] RSPM (R 4.2.0) #>  bslib                  0.4.0    2022-07-16 [2] RSPM (R 4.2.0) #>  cachem                 1.0.6    2021-08-19 [2] CRAN (R 4.2.0) #>  cli                    3.4.1    2022-09-23 [2] RSPM (R 4.2.0) #>  crayon                 1.5.2    2022-09-29 [2] RSPM (R 4.2.0) #>  DelayedArray           0.22.0   2022-04-26 [1] Bioconductor #>  desc                   1.4.2    2022-09-08 [2] RSPM (R 4.2.0) #>  digest                 0.6.29   2021-12-01 [2] CRAN (R 4.2.0) #>  evaluate               0.16     2022-08-09 [2] RSPM (R 4.2.0) #>  fastmap                1.1.0    2021-01-25 [2] CRAN (R 4.2.0) #>  fs                     1.5.2    2021-12-08 [2] CRAN (R 4.2.0) #>  GenomeInfoDb           1.32.4   2022-09-06 [1] Bioconductor #>  GenomeInfoDbData       1.2.8    2022-05-02 [1] Bioconductor #>  GenomicRanges          1.48.0   2022-04-26 [1] Bioconductor #>  highr                  0.9      2021-04-16 [2] CRAN (R 4.2.0) #>  htmltools              0.5.3    2022-07-18 [2] RSPM (R 4.2.0) #>  IRanges                2.30.1   2022-08-18 [1] Bioconductor #>  jquerylib              0.1.4    2021-04-26 [2] CRAN (R 4.2.0) #>  jsonlite               1.8.2    2022-10-02 [2] RSPM (R 4.2.0) #>  knitr                  1.40     2022-08-24 [2] RSPM (R 4.2.0) #>  lattice                0.20-45  2021-09-22 [3] CRAN (R 4.2.1) #>  magrittr               2.0.3    2022-03-30 [2] CRAN (R 4.2.0) #>  Matrix                 1.5-1    2022-09-13 [3] RSPM (R 4.2.0) #>  MatrixGenerics         1.8.1    2022-06-26 [1] Bioconductor #>  matrixStats            0.62.0   2022-04-19 [1] RSPM (R 4.2.0) #>  memoise                2.0.1    2021-11-26 [2] CRAN (R 4.2.0) #>  pkgdown                2.0.6    2022-07-16 [2] RSPM (R 4.2.0) #>  purrr                  0.3.4    2020-04-17 [2] CRAN (R 4.2.0) #>  R6                     2.5.1    2021-08-19 [2] CRAN (R 4.2.0) #>  ragg                   1.2.3    2022-09-29 [2] RSPM (R 4.2.0) #>  RCurl                  1.98-1.9 2022-10-03 [1] RSPM (R 4.2.0) #>  rlang                  1.0.6    2022-09-24 [2] RSPM (R 4.2.0) #>  rmarkdown              2.16     2022-08-24 [2] RSPM (R 4.2.0) #>  rprojroot              2.0.3    2022-04-02 [2] CRAN (R 4.2.0) #>  S4Vectors              0.34.0   2022-04-26 [1] Bioconductor #>  sass                   0.4.2    2022-07-16 [2] RSPM (R 4.2.0) #>  sessioninfo            1.2.2    2021-12-06 [2] RSPM (R 4.2.0) #>  stringi                1.7.8    2022-07-11 [2] RSPM (R 4.2.0) #>  stringr                1.4.1    2022-08-20 [2] RSPM (R 4.2.0) #>  SummarizedExperiment   1.26.1   2022-04-29 [1] Bioconductor #>  systemfonts            1.0.4    2022-02-11 [2] RSPM (R 4.2.0) #>  textshaping            0.3.6    2021-10-13 [2] RSPM (R 4.2.0) #>  tfhunter             * 0.99.0   2022-10-06 [1] Bioconductor #>  xfun                   0.33     2022-09-12 [2] RSPM (R 4.2.0) #>  XVector                0.36.0   2022-04-26 [1] Bioconductor #>  yaml                   2.3.5    2022-02-21 [2] CRAN (R 4.2.0) #>  zlibbioc               1.42.0   2022-04-26 [1] Bioconductor #>  #>  [1] /__w/_temp/Library #>  [2] /usr/local/lib/R/site-library #>  [3] /usr/local/lib/R/library #>  #> ──────────────────────────────────────────────────────────────────────────────"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fabrício Almeida-Silva. Author, maintainer. Yves Van de Peer. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Almeida-Silva F, Van de Peer Y (2022). tfhunter: Identification classification plant transcription factors. R package version 0.99.0, https://github.com/almeidasilvaf/tfhunter.","code":"@Manual{,   title = {tfhunter: Identification and classification of plant transcription factors},   author = {Fabrício Almeida-Silva and Yves {Van de Peer}},   year = {2022},   note = {R package version 0.99.0},   url = {https://github.com/almeidasilvaf/tfhunter}, }"},{"path":"/index.html","id":"tfhunter-","dir":"","previous_headings":"","what":"Identification and classification of plant transcription factors","title":"Identification and classification of plant transcription factors","text":"goal tfhunter identify plant transcription factors protein sequence data classify families subfamilies using classification scheme implemented PlantTFDB.","code":""},{"path":"/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation instructions","title":"Identification and classification of plant transcription factors","text":"Get latest stable R release CRAN. install tfhunter Bioconductor using following code: development version GitHub :","code":"if (!requireNamespace(\"BiocManager\", quietly = TRUE)) {     install.packages(\"BiocManager\") }  BiocManager::install(\"tfhunter\") BiocManager::install(\"almeidasilvaf/tfhunter\")"},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Identification and classification of plant transcription factors","text":"citation output using citation('tfhunter') R. Please run check updates cite tfhunter. Please note tfhunter project made possible thanks many R bioinformatics software authors, cited either vignettes /paper(s) describing package.","code":"print(citation('tfhunter'), bibtex = TRUE) #>  #> To cite package 'tfhunter' in publications use: #>  #>   Almeida-Silva F, Van de Peer Y (2022). _tfhunter: Identification and #>   classification of plant transcription factors_. R package version #>   0.99.0, <https://github.com/almeidasilvaf/tfhunter>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {tfhunter: Identification and classification of plant transcription factors}, #>     author = {Fabrício Almeida-Silva and Yves {Van de Peer}}, #>     year = {2022}, #>     note = {R package version 0.99.0}, #>     url = {https://github.com/almeidasilvaf/tfhunter}, #>   }"},{"path":"/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Identification and classification of plant transcription factors","text":"Please note tfhunter project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"/index.html","id":"development-tools","dir":"","previous_headings":"","what":"Development tools","title":"Identification and classification of plant transcription factors","text":"Continuous code testing possible thanks GitHub actions usethis, remotes, rcmdcheck customized use Bioconductor’s docker containers BiocCheck. Code coverage assessment possible thanks codecov covr. documentation website automatically updated thanks pkgdown. documentation formatted thanks devtools roxygen2. details, check dev directory. package developed using biocthis.","code":""},{"path":"/reference/annotate_pfam.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate proteins sequences with PFAM domains — annotate_pfam","title":"Annotate proteins sequences with PFAM domains — annotate_pfam","text":"PFAM domains assigned sequence using HMMER.","code":""},{"path":"/reference/annotate_pfam.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate proteins sequences with PFAM domains — annotate_pfam","text":"","code":"annotate_pfam(seq = NULL, evalue = 1e-05)"},{"path":"/reference/annotate_pfam.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate proteins sequences with PFAM domains — annotate_pfam","text":"seq AAStringSet object returned Biostrings::readAAStringSet(). sequences object must represent translated sequences primary (longest) transcripts. evalue Numeric indicating E-value threshold hmmsearch used domains without pre-defined domain cutoffs. valid parameter mode = 'local'. Default: 1e-05.","code":""},{"path":"/reference/annotate_pfam.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate proteins sequences with PFAM domains — annotate_pfam","text":"2-column data frame variables Gene Domain, contain gene IDs domain IDs, respectively.","code":""},{"path":"/reference/annotate_pfam.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate proteins sequences with PFAM domains — annotate_pfam","text":"","code":"data(gsu) seq <- gsu[1:5] if(hmmer_is_installed()) {     annotate_pfam(seq) } #>         Gene  Domain #> 1 gsu06140.1 PF00249 #> 2 gsu05000.1 PF02042 #> 3 gsu04730.1 PF02042 #> 4 gsu00340.1 PF00076 #> 5 gsu06140.1 G2-like"},{"path":"/reference/classification_scheme.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame of TF family classification scheme — classification_scheme","title":"Data frame of TF family classification scheme — classification_scheme","text":"classification scheme one used PlantTFDB.","code":""},{"path":"/reference/classification_scheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame of TF family classification scheme — classification_scheme","text":"","code":"data(classification_scheme)"},{"path":"/reference/classification_scheme.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data frame of TF family classification scheme — classification_scheme","text":"data frame following variables: Family TF family name. Subfamily TF subfamily name. DBD DNA-binding domain Auxiliary Auxiliary domain Forbidden Forbidden domain","code":""},{"path":"/reference/classification_scheme.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data frame of TF family classification scheme — classification_scheme","text":"Jin, J., Tian, F., Yang, D. C., Meng, Y. Q., Kong, L., Luo, J., & Gao, G. (2016). PlantTFDB 4.0: toward central hub transcription factors regulatory interactions plants. Nucleic acids research, gkw982.","code":""},{"path":"/reference/classification_scheme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Data frame of TF family classification scheme — classification_scheme","text":"","code":"data(classification_scheme)"},{"path":"/reference/classify_tfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Identify TFs and classify them in families — classify_tfs","title":"Identify TFs and classify them in families — classify_tfs","text":"Identify TFs classify families","code":""},{"path":"/reference/classify_tfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Identify TFs and classify them in families — classify_tfs","text":"","code":"classify_tfs(domain_annotation = NULL)"},{"path":"/reference/classify_tfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Identify TFs and classify them in families — classify_tfs","text":"domain_annotation 2-column data frame gene ID first column domain ID second column.","code":""},{"path":"/reference/classify_tfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Identify TFs and classify them in families — classify_tfs","text":"2-column data frame variables Gene Family representing gene ID TF family, respectively.","code":""},{"path":"/reference/classify_tfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Identify TFs and classify them in families — classify_tfs","text":"","code":"data(gsu_annotation) domain_annotation <- gsu_annotation families <- classify_tfs(domain_annotation)"},{"path":"/reference/get_tf_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get TF frequencies for each species as a SummarizedExperiment object — get_tf_counts","title":"Get TF frequencies for each species as a SummarizedExperiment object — get_tf_counts","text":"function identifies classifies TFs, returns TF counts family SummarizedExperiment object","code":""},{"path":"/reference/get_tf_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get TF frequencies for each species as a SummarizedExperiment object — get_tf_counts","text":"","code":"get_tf_counts(proteomes, species_metadata = NULL)"},{"path":"/reference/get_tf_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get TF frequencies for each species as a SummarizedExperiment object — get_tf_counts","text":"proteomes List AAStringSet objects species_metadata (Optional) data frame containing species names row names (names must match element names proteomes list), species metadata (e.g., taxonomic information, ecological information) columns. NULL, colData SummarizedExperiment object empty.","code":""},{"path":"/reference/get_tf_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get TF frequencies for each species as a SummarizedExperiment object — get_tf_counts","text":"SummarizedExperiment object containing transcription factor frequencies per family species, well species metadata (species_metadata NULL).","code":""},{"path":"/reference/get_tf_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get TF frequencies for each species as a SummarizedExperiment object — get_tf_counts","text":"","code":"data(gsu)  set.seed(123) # Pick random subsets of 100 genes to simulate other species proteomes <- list(     Gsu1 = gsu[sample(names(gsu), 50, replace = FALSE)],     Gsu2 = gsu[sample(names(gsu), 50, replace = FALSE)],     Gsu3 = gsu[sample(names(gsu), 50, replace = FALSE)],     Gsu4 = gsu[sample(names(gsu), 50, replace = FALSE)] )  # Create species metadata species_metadata <- data.frame(     row.names = names(proteomes),     Division = \"Rhodophyta\",     Origin = c(\"US\", \"Belgium\", \"China\", \"Brazil\") )  # Get SummarizedExperiment object se <- get_tf_counts(proteomes, species_metadata)"},{"path":"/reference/gsu.html","id":null,"dir":"Reference","previous_headings":"","what":"Protein sequences of the algae species Galdieria sulphuraria — gsu","title":"Protein sequences of the algae species Galdieria sulphuraria — gsu","text":"Data obtained PLAZA Diatoms. genes containing domains used TF family classification kept package size issues.","code":""},{"path":"/reference/gsu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Protein sequences of the algae species Galdieria sulphuraria — gsu","text":"","code":"data(gsu)"},{"path":"/reference/gsu.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Protein sequences of the algae species Galdieria sulphuraria — gsu","text":"AAStringSet object returned Biostrings::readAAStringSet().","code":""},{"path":"/reference/gsu.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Protein sequences of the algae species Galdieria sulphuraria — gsu","text":"Osuna-Cruz, C. M., Bilcke, G., Vancaester, E., De Decker, S., Bones, . M., Winge, P., ... & Vandepoele, K. (2020). Seminavis robusta genome provides insights evolutionary adaptations benthic diatoms. Nature communications, 11(1), 1-13.","code":""},{"path":"/reference/gsu.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Protein sequences of the algae species Galdieria sulphuraria — gsu","text":"","code":"data(gsu)"},{"path":"/reference/gsu_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Domain annotation for the algae species Galdieria sulphuraria\n\nThe data set was created using the funcion annotate_pfam() in local\nmode. — gsu_annotation","title":"Domain annotation for the algae species Galdieria sulphuraria\n\nThe data set was created using the funcion annotate_pfam() in local\nmode. — gsu_annotation","text":"Domain annotation algae species Galdieria sulphuraria data set created using funcion annotate_pfam() local mode.","code":""},{"path":"/reference/gsu_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Domain annotation for the algae species Galdieria sulphuraria\n\nThe data set was created using the funcion annotate_pfam() in local\nmode. — gsu_annotation","text":"","code":"data(gsu_annotation)"},{"path":"/reference/gsu_annotation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Domain annotation for the algae species Galdieria sulphuraria\n\nThe data set was created using the funcion annotate_pfam() in local\nmode. — gsu_annotation","text":"2-column data frame following variables: Gene Gene ID Annotation Domain ID domain name ID available PFAM","code":""},{"path":"/reference/gsu_annotation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Domain annotation for the algae species Galdieria sulphuraria\n\nThe data set was created using the funcion annotate_pfam() in local\nmode. — gsu_annotation","text":"","code":"data(gsu_annotation)"},{"path":"/reference/gsu_families.html","id":null,"dir":"Reference","previous_headings":"","what":"TFs families of the algae species Galdieria sulphuraria\n\nThe data set was created using the funcion classify_tfs(). — gsu_families","title":"TFs families of the algae species Galdieria sulphuraria\n\nThe data set was created using the funcion classify_tfs(). — gsu_families","text":"TFs families algae species Galdieria sulphuraria data set created using funcion classify_tfs().","code":""},{"path":"/reference/gsu_families.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TFs families of the algae species Galdieria sulphuraria\n\nThe data set was created using the funcion classify_tfs(). — gsu_families","text":"","code":"data(gsu_families)"},{"path":"/reference/gsu_families.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"TFs families of the algae species Galdieria sulphuraria\n\nThe data set was created using the funcion classify_tfs(). — gsu_families","text":"2-column data frame following variables: Gene Gene ID Family TF family","code":""},{"path":"/reference/gsu_families.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TFs families of the algae species Galdieria sulphuraria\n\nThe data set was created using the funcion classify_tfs(). — gsu_families","text":"","code":"data(gsu_families)"},{"path":"/reference/hmmer_is_installed.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if HMMER is installed — hmmer_is_installed","title":"Check if HMMER is installed — hmmer_is_installed","text":"Check HMMER installed","code":""},{"path":"/reference/hmmer_is_installed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if HMMER is installed — hmmer_is_installed","text":"","code":"hmmer_is_installed()"},{"path":"/reference/hmmer_is_installed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if HMMER is installed — hmmer_is_installed","text":"Logical indicating whether HMMER installed .","code":""},{"path":"/reference/hmmer_is_installed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if HMMER is installed — hmmer_is_installed","text":"","code":"hmmer_is_installed() #> [1] TRUE"},{"path":"/reference/tf_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"TF counts per family in 5 simulated species — tf_counts","title":"TF counts per family in 5 simulated species — tf_counts","text":"Simulated species created sampling 100 genes example data set gsu set.seed(123).","code":""},{"path":"/reference/tf_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"TF counts per family in 5 simulated species — tf_counts","text":"","code":"data(tf_counts)"},{"path":"/reference/tf_counts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"TF counts per family in 5 simulated species — tf_counts","text":"SummarizedExperiment TF frequencies per family species assay species metadata colData.","code":""},{"path":"/reference/tf_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"TF counts per family in 5 simulated species — tf_counts","text":"","code":"data(tf_counts)"},{"path":"/news/index.html","id":"tfhunter-0990","dir":"Changelog","previous_headings":"","what":"tfhunter 0.99.0","title":"tfhunter 0.99.0","text":"NEW FEATURES Added NEWS.md file track changes package.","code":""}]
